{"version":3,"sources":["breached.jsx","App.js","serviceWorker.js","index.js"],"names":["Breached","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","logo","site","Name","LogoType","id","replace","react_default","a","createElement","reactstrap_es","className","top","width","src","alt","DataClasses","map","c","BreachDate","style","marginBottom","toggler","dangerouslySetInnerHTML","__html","Description","Domain","href","target","rel","color","toUpperCase","slice","toLowerCase","React","Component","App","handleInput","e","setState","email","value","handleSubmit","test","info","clicked","notValid","axios","get","then","res","data","allInfo","i","length","push","enterPassword","key","_this2","type","onChange","onKeyPress","placeholder","onClick","src_breached","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81af3c41.chunk.js","sourcesContent":["import React from 'react';\nimport { UncontrolledCollapse, Button, CardBody, Card, CardImg, CardTitle, } from 'reactstrap';\nimport \"./breached.css\";\n\n\nclass Breached extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logo: \"https://haveibeenpwned.com/Content/Images/PwnedLogos/\" + this.props.site.Name + \".\" + this.props.site.LogoType,\n      id: this.props.site.Name.replace(/[0-9]/g, '')\n    };\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Card className=\"cards\">\n          <CardImg className=\"cardImage\" top width=\"100%\" src={this.state.logo} alt={this.props.site.Name} />\n          <CardBody>\n            <CardTitle><u>Site piraté</u>: <p>{this.props.site.Name}</p></CardTitle>\n            <p className=\"lead\"><u>Données compromises</u>: {this.props.site.DataClasses.map(c => <span>{c}, </span>)}</p>\n            <p><u>Date de la violation</u>: {this.props.site.BreachDate}</p>\n            <div id={this.state.id} style={{ marginBottom: '1rem' }} className=\"description\">+ d'informations</div>\n            <UncontrolledCollapse toggler={\"#\" + this.state.id}>\n              <Card>\n                <CardBody className=\"cardbody\">\n                <div dangerouslySetInnerHTML={{__html: this.props.site.Description}} />\n                </CardBody>\n              </Card>\n            </UncontrolledCollapse>\n            {this.props.site.Domain === \"\" ? <div></div> : \n            <a href={\"https://\" + this.props.site.Domain} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Button className=\"buttons\" color=\"primary\" style={{ marginBottom: '1rem' }}>Aller sur {(this.props.site.Domain)[0].toUpperCase() + (this.props.site.Domain).slice(1).toLowerCase()}</Button></a>}\n          </CardBody>\n        </ Card>\n      </div>\n\n    )\n  }\n}\n\n\nexport default Breached;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Breached from './breached.jsx';\nimport './App.css';\nimport { Button, Container } from 'reactstrap'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      info: [],\n      clicked: false,\n      notValid: false,\n    }\n  }\n\n\n  handleInput = (e) => {\n    this.setState({ email: e.target.value })\n  }\n\n  handleSubmit = (email) => {\n    const validEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (validEmail.test(this.state.email)) {\n      this.setState({ info: [], clicked: true, notValid: false })\n      axios.get(\"https://haveibeenpwned.com/api/breachedaccount/\" + email)\n        .then(res => {\n          const site = res.data\n          const allInfo = this.state.info\n          for (let i = 0; i < site.length; i++) {\n            axios.get(\"https://haveibeenpwned.com/api/v2/breach/\" + site[i])\n              .then(res => {\n                const info = res.data\n                allInfo.push(info)\n                this.setState({ info: allInfo })\n              })\n          }\n        })\n    }\n    else this.setState({ notValid: true, info: [], clicked: false });\n  }\n\n  enterPassword = (e) => {\n    if (e.key === 'Enter') {\n      this.handleSubmit(this.state.email)\n    }\n  }\n\n  render() {\n    return (\n      <body>\n        <section className=\"input\">\n          <h1>\n            Entre ton adresse mail\n        </h1>\n          <input className=\"emailinput\" type=\"email\" value={this.state.email} onChange={this.handleInput} onKeyPress={this.enterPassword} placeholder=\"Email\"></input>\n          <Button onClick={() => this.handleSubmit(this.state.email)}>Submit</Button>\n        </section>\n        {this.state.info.length > 0 ?\n          <div className=\"pwned\"><h2>Saperlipopette!!</h2><h4>Tes infos ont été compromises sur {this.state.info.length} site{this.state.info.length > 1 ? \"s\" : \"\"} piraté{this.state.info.length > 1 ? \"s\" : \"\"}.<br></br>\n            Va changer ton mot de passe</h4></div>\n          : this.state.clicked ? <h2 className=\"notPwned bien\">Tout va bien</h2> : \"\"}\n        <div className=\"list\">\n          {this.state.notValid === true ? <h2>Oups, adresse non valide</h2> : \"\"}\n          {this.state.info.map(site => <ul><Breached site={site} /></ul>)}\n        </div>\n      </body >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}